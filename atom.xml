<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>modalala</title>
  
  <subtitle>bo~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-28T11:45:56.648Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>miki7</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java基础</title>
    <link href="http://yoursite.com/2019/08/28/Java%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/08/28/Java 基础/</id>
    <published>2019-08-28T11:45:13.746Z</published>
    <updated>2019-08-28T11:45:56.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a>Java 基础</h2><h3 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h3><h4 id="异常说明"><a href="#异常说明" class="headerlink" title="异常说明"></a>异常说明</h4><p>如果出错，创建出一个异常类对象，抛出相关信息</p><h4 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Throwable</span><br><span class="line">  | - Error java内部错误 不会捕获异常 （内部错误）</span><br><span class="line">  | - Exception | - RuntimeExecption 运行异常 运行阶段 nullpoint </span><br><span class="line">                | - CheckedException 检查异常 编译阶段 （外部错误） 文件 url IOException等</span><br></pre></td></tr></table></figure><h4 id="Throw-amp-Throws"><a href="#Throw-amp-Throws" class="headerlink" title="Throw &amp; Throws"></a>Throw &amp; Throws</h4><ul><li><p><strong>位置不同</strong></p><p>throw 是跟着异常对象  用在函数内</p><p>throws 跟着异常类  用在函数上</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NumberFormateException();</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b )</span> throws Exception</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>功能性</strong></p><p>告知</p><ul><li>throws 告知可能会抛出异常 </li><li>throw 某部分执行到throw一定抛出具体异常对象 且功能结束，告知异常</li></ul><p>消极处理</p><ul><li>真正处理的是 <strong>函数的上级调用者</strong> 即：抛出 而不是用try catch 捕获</li></ul></li></ul><h4 id="Finally"><a href="#Finally" class="headerlink" title="Finally"></a>Finally</h4><p>try中执行到return语句，不会直接return， 先计算return表达式，把结果保存到临时栈，再执行finally语句，之后才把临时栈的结果返回。</p><h3 id="Java容器"><a href="#Java容器" class="headerlink" title="Java容器"></a>Java容器</h3><h4 id="容器模型"><a href="#容器模型" class="headerlink" title="容器模型"></a>容器模型</h4><p><img src="/images/1566981010621.png" alt="1566981010621"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/20991168562147317681_wps%E5%9B%BE%E7%89%87.png" alt="20991168562147317681_wps图片"></p><p>### </p><h4 id="装箱-amp-拆箱"><a href="#装箱-amp-拆箱" class="headerlink" title="装箱&amp;拆箱"></a>装箱&amp;拆箱</h4><p>int 与 integer区别： 数据类型与包装类区别</p><p>int：直接存数值 （初始化 = 0）</p><p>integer：引用指向这个对象（初始值 null）</p><p>integer a =1; -&gt; integer a = integer.valueOf(1);</p><h3 id="JavaI-O流"><a href="#JavaI-O流" class="headerlink" title="JavaI/O流"></a>JavaI/O流</h3><h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><p>String 、StringBuild、 StringBuffer区别</p><h3 id="Java并发"><a href="#Java并发" class="headerlink" title="Java并发"></a>Java并发</h3><h4 id="线程内存模型"><a href="#线程内存模型" class="headerlink" title="线程内存模型"></a>线程内存模型</h4><p><img src="/images/20170328111450634.jpg" alt="20170328111450634"></p><p>特点：</p><ol><li>每个线程需要从<strong>主内存</strong>中 <strong>获取</strong> 变量的值</li><li>获取数据之后回放入自己的工作内存中，都是主内存拷贝的<strong>副本</strong></li><li>线程间无法<strong>直接访问对方工作内存</strong></li></ol><h4 id="线程工作状态"><a href="#线程工作状态" class="headerlink" title="线程工作状态"></a>线程工作状态</h4><p><img src="/images/20170328142908765.png" alt="20170328142908765"></p><ol><li>lock（锁定）：在某一个线程在读取主内存的时候需要把变量锁定。</li><li>unlock（解锁）：某一个线程读取玩变量值之后会释放锁定，别的线程就可以进入操作 。</li><li>read（读取）：从主内存中读取变量的值并放入工作内存中 。</li><li>load（加载）：从read操作得到的值放入工作内存变量副本中 。</li><li>use（使用）：把工作内存中的一个变量值传递给执行引擎 。</li><li>assign（赋值）：它把一个从执行引擎接收到的值赋值给工作内存的变量 。</li><li>store（存储）：把工作内存中的一个变量的值传送到主内存中 。</li><li>write（写入）：把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ol><h4 id="线程内部方法"><a href="#线程内部方法" class="headerlink" title="线程内部方法"></a>线程内部方法</h4><p><img src="/images/806956-20180120151328678-189155379.png" alt="806956-20180120151328678-189155379"></p><h4 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">one</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;........&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///////////////////2////////////</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">two</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;......&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/////////////3//////////内部////////</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;  sout(<span class="string">"sdfs"</span>) ; &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    sout(<span class="string">"sdfs"</span>) ;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">///////////</span></span><br><span class="line">one a = <span class="keyword">new</span> one();</span><br><span class="line">two b = <span class="keyword">new</span> two();</span><br><span class="line">a.start(), b.start();</span><br></pre></td></tr></table></figure><p>#### </p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><h5 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h5><p>利用线程池管理线程的创建销毁，【缓存功能】</p><ol><li>降低资源消耗</li><li>提高响应速度</li><li>线程可管理</li></ol><h5 id="常用线程池"><a href="#常用线程池" class="headerlink" title="常用线程池"></a>常用线程池</h5><ol><li>CacheThreadPool 无界  SynchronizedQueue 无缓存队列 接收任务直接处理</li><li>FixedThreadPool 有界  LinkedBlokingQueue 列表阻塞队列 <strong>无界队列可缓存</strong> 读写分离</li><li>SingleThreadPool 单一 LinkedBlokingQueue  指定队列 1</li><li>ScheduledThreadPoll 定时周期</li></ol><ul><li><p>CachedThreadPool 无界线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CachedThreadPoolTest</span></span>&#123;</span><br><span class="line">    psvm&#123;</span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span>(<span class="number">20</span> times)</span><br><span class="line">        &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> WorkTask());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//构造方法 参数 （线程数 最大线程数 时间片 单位时间 阻塞队列）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadpoolExecutor(<span class="number">0</span>,Integer.MAX_VALUE,<span class="number">60L</span>,TimeUnit.SECONDS,<span class="keyword">new</span> Sysnchronous&lt;Runnable&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>FixedThreadPool 有界线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedThreadPoolTest</span></span>&#123;</span><br><span class="line">    psvm&#123;</span><br><span class="line">        ExecutorService exec = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="number">20</span> times)</span><br><span class="line">        &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> WorkTask());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,<span class="number">0L</span>, TimeUnit.MILLISECONDS,<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>SingleThreadExecutor 单一线程池</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleThreadPoolTest</span></span>&#123;</span><br><span class="line">    psvm&#123;</span><br><span class="line">        ExecutorService exec = Executors.newSingleTheadExecutor();</span><br><span class="line">         <span class="keyword">for</span>(<span class="number">20</span> times)</span><br><span class="line">        &#123;</span><br><span class="line">            exec.execute(<span class="keyword">new</span> WorkTask());</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,<span class="number">0L</span>, TimeUnit.MILLISECONDS,<span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>ScheduledThreadPool 定时周期</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduledThreadPool</span></span>&#123;</span><br><span class="line">    psvm&#123;</span><br><span class="line">        ExectorService exec = <span class="keyword">new</span> Exector.newScheduledThreadExecutor(<span class="number">3</span>);</span><br><span class="line">        exec.execute(<span class="keyword">new</span> WorkTask());</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h5><ol><li>新建  new创建线程 -&gt; <strong>JVM分配内存</strong> &amp; <strong>初始化成员变量的值</strong>。</li><li>就绪 线程对象调用start() 创建<strong>方法调用栈</strong> &amp; <strong>程序计数器</strong> 等待调度运行。</li><li>运行 处于就绪状态线程<strong>获得CPU</strong>，开始执行<strong>run（）方法</strong>的线程执行体。</li><li>阻塞<ul><li>等待阻塞 run线程 执行 <strong>o.wait()</strong>  jvm 会把线程放进等待队列</li><li>同步阻塞 run线程 想获取对象的同步锁，该锁被别的线程占用，jvm把线程放入锁池中（lock pool）</li><li>其他阻塞 Thread.sleep || t.join() || 发出IO请求</li></ul></li><li>死亡<ul><li>正常结束 run() || call() 方法执行完成</li><li>异常结束 线程抛出异常</li><li>调用stop stop()</li></ul></li></ol><p><img src="/images/sdsdfsd.png" alt="sdsdfsd"></p><p>乐观锁 &amp; 悲观锁</p><h4 id="容器并发"><a href="#容器并发" class="headerlink" title="容器并发"></a>容器并发</h4><h5 id="CopyOnWrite容器"><a href="#CopyOnWrite容器" class="headerlink" title="CopyOnWrite容器"></a>CopyOnWrite容器</h5><p>当我们向容器中添加元素，先copy该容器，把数据添加到copy容器中，再将数组引用指向容器。</p><p>实现线程安全：</p><ol><li>volatile修饰数组引用：确保数组内存可见性。【内存可见】-》 copy数组引用。</li><li>对容器修改操作同步。同一时刻只有一条线程修改容器</li><li>修改容器复制容器：修改操作都在新数组上，原数组可以放心读。</li></ol><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ol><li>并发读，实现读写分离 （<strong>当前容器不会添加任何元素</strong>） 无需加锁</li></ol><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><ol><li>内存占用，使用两个容器</li><li>只能保证数据最终一致性，无法保证实时性</li></ol><h6 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h6><p>读多写少，且不要求实时性</p><h5 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h5><p>线程安全的HashTable改进版（一个线程访问，其他统统阻塞），而ConcurrentHashMap实现分段锁机制。</p><h6 id="分段锁原理"><a href="#分段锁原理" class="headerlink" title="分段锁原理"></a>分段锁原理</h6><p>ConcurrentHashMap由多个Segment构成，每个Segment都包含一张哈希表。每次操作只将操作数据所属的Segment锁起来，从而避免将整个锁住。</p><p><img src="/images/20170206102155332.png" alt="20170206102155332"></p><p><img src="/images/1566979637383.png" alt="1566979637383"></p><p>每个Segment守护一个HashEntry数组的元素，当对hashEntry数组数据修改是，必须先获取对应的<strong>Segment锁</strong>（就是分段锁机制）</p><p>ConcurrentHashMap内部包含了Segment数组，而每个Segment又继承自ReentrantLock，因此它是一把可重入的锁。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-基础&quot;&gt;&lt;a href=&quot;#Java-基础&quot; class=&quot;headerlink&quot; title=&quot;Java 基础&quot;&gt;&lt;/a&gt;Java 基础&lt;/h2&gt;&lt;h3 id=&quot;异常类&quot;&gt;&lt;a href=&quot;#异常类&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>剑指office算法</title>
    <link href="http://yoursite.com/2019/08/27/office%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/27/office算法/</id>
    <published>2019-08-27T09:06:41.255Z</published>
    <updated>2019-08-28T11:45:48.934Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不修改数组找出重复的数字"><a href="#不修改数组找出重复的数字" class="headerlink" title="不修改数组找出重复的数字"></a>不修改数组找出重复的数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">给定一个长度为 n+1 的数组nums，数组中所有的数均在 1∼n 的范围内，其中 n≥1。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">请找出数组中任意一个重复的数，但不能修改输入的数组。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">样例</span></span><br><span class="line"><span class="comment">给定 nums = [2, 3, 5, 4, 3, 2, 6, 7]。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回 2 或 3。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">duplicateInArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">1</span>, r = nums.size() <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = r + l &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums) s += x &gt;=l &amp;&amp; x &lt;= r;</span><br><span class="line">            <span class="keyword">if</span>(s &gt; mid - l + <span class="number">1</span>) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">给定：</span></span><br><span class="line"><span class="comment">前序遍历是：[3, 9, 20, 15, 7]</span></span><br><span class="line"><span class="comment">中序遍历是：[9, 3, 15, 20, 7]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">返回：[3, 9, 20, null, null, 15, 7, null, null, null, null]</span></span><br><span class="line"><span class="comment">返回的二叉树如下所示：</span></span><br><span class="line"><span class="comment">    3</span></span><br><span class="line"><span class="comment">   / \</span></span><br><span class="line"><span class="comment">  9  20</span></span><br><span class="line"><span class="comment">    /  \</span></span><br><span class="line"><span class="comment">   15   7</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; hash;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; preorder, inorder;</span><br><span class="line">    </span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; _preorder, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; _inorder)</span> </span>&#123;</span><br><span class="line">        preorder = _preorder, inorder = _inorder;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; inorder.size(); i++) hash[inorder[i]] = i;</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,preorder.size() <span class="number">-1</span>,<span class="number">0</span>,inorder.size() <span class="number">-1</span>);</span><br><span class="line">        <span class="function">TreeNode* <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> pl,<span class="keyword">int</span> pr,<span class="keyword">int</span> il, <span class="keyword">int</span> ir)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(pl &gt; pr) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">int</span> k = hash[root -&gt; val];</span><br><span class="line">            <span class="keyword">auto</span> left = dfs(pl+<span class="number">1</span>, pl + k -il, il, k <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">auto</span> right = dfs(pl+ k -il +<span class="number">1</span>, pr, k + <span class="number">1</span>, ir);</span><br><span class="line">            root-&gt;left = left, root-&gt;right = right;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二叉树的下一个节点"><a href="#二叉树的下一个节点" class="headerlink" title="二叉树的下一个节点"></a>二叉树的下一个节点</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">给定一棵二叉树的其中一个节点，请找出中序遍历序列的下一个节点。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果给定的节点是中序遍历序列的最后一个，则返回空节点;</span></span><br><span class="line"><span class="comment">二叉树一定不为空，且给定的节点一定不是空节点；</span></span><br><span class="line"><span class="comment">样例</span></span><br><span class="line"><span class="comment">假定二叉树是：[2, 1, 3, null, null, null, null]， 给出的是值等于2的节点。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">则应返回值等于3的节点。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">解释：该二叉树的结构如下，2的后继节点是3。</span></span><br><span class="line"><span class="comment">  2</span></span><br><span class="line"><span class="comment"> / \</span></span><br><span class="line"><span class="comment">1   3</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode *father;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL), father(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">inorderSuccessor</span><span class="params">(TreeNode* p)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>( p -&gt; right)</span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">while</span>(p -&gt; left) p = p -&gt; left;</span><br><span class="line">           <span class="keyword">return</span> p;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">while</span>( p -&gt; father &amp;&amp; p == p -&gt; father -&gt; right)</span><br><span class="line">            p = p -&gt; father;</span><br><span class="line">        <span class="keyword">return</span> p -&gt; father;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>## </p><h2 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stk,cache;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    MyQueue() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stk.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; a, <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(a.size())&#123;</span><br><span class="line">            b.push(a.top());</span><br><span class="line">            a.pop();</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        copy(stk,cache);</span><br><span class="line">        <span class="keyword">int</span> result = cache.top();</span><br><span class="line">        cache.pop();</span><br><span class="line">        copy(cache,stk);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        copy(stk,cache);</span><br><span class="line">        <span class="keyword">int</span> result = cache.top();</span><br><span class="line">        copy(cache,stk);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stk.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * bool param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="斐波那契数列问题"><a href="#斐波那契数列问题" class="headerlink" title="斐波那契数列问题"></a>斐波那契数列问题</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">定义 a0=1a0=1, a1=1a1=1, an=an−1+an−2an=an−1+an−2，求 anan 是多少。</span></span><br><span class="line"><span class="comment">为了避免考虑整数溢出问题，我们求 an%pan%p 的值，p=109+7p=109+7。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="comment">// 1.递归</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (f(n<span class="number">-1</span>) + f(n<span class="number">-2</span>)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.记忆化搜索</span></span><br><span class="line"><span class="comment">//开一个大数组记录中间结果 如果状态被计算过，直接查表，否则递归计算  </span></span><br><span class="line"><span class="comment">//递归计算，递归层数太多会爆栈</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">if</span> <span class="title">f2</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[n]) <span class="keyword">return</span> a[n];</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    a[n] = f2(n - <span class="number">1</span>) + f2(n - <span class="number">2</span>);</span><br><span class="line">    a[n] %= MOD;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.递推</span></span><br><span class="line"><span class="comment">//开个大数组，记录每个数的值，用循环递推计算，</span></span><br><span class="line"><span class="comment">//计算n个状态 则开一个长度是 n 的数组，内存将成为瓶颈</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100000</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f3</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = a[i <span class="number">-1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">        a[i] %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.递归+滚动变量</span></span><br><span class="line"><span class="comment">//递推优化 记录前两项值 时间复杂度o(n) 变成 空间复杂度变成0（1）</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f4</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">    x = y = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        z = (x + y) % MOD;</span><br><span class="line">        x = y;</span><br><span class="line">        y = z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后一种使用矩阵运算+快速幂</p><p>快速幂模板<br>$$<br>m^k\pmod p<br>$$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下次分析</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//时间复杂度 O(logk)。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qmi</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> k, <span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">1</span> %p, t = m;</span><br><span class="line">    <span class="keyword">while</span>(k)&#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res = res * t %p;</span><br><span class="line">        t = t * t % p;</span><br><span class="line">        k &gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。</span></span><br><span class="line"><span class="comment">输入一个升序的数组的一个旋转，输出旋转数组的最小元素。</span></span><br><span class="line"><span class="comment">例如数组&#123;3,4,5,1,2&#125;为&#123;1,2,3,4,5&#125;的一个旋转，该数组的最小值为1。</span></span><br><span class="line"><span class="comment">数组可能包含重复项。</span></span><br><span class="line"><span class="comment">注意：数组内所含元素非负，若数组大小为0，请返回-1。</span></span><br><span class="line"><span class="comment">样例</span></span><br><span class="line"><span class="comment">输入：nums=[2,2,2,0,1]</span></span><br><span class="line"><span class="comment">输出：0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="数组中只出现一次的数字O"><a href="#数组中只出现一次的数字O" class="headerlink" title="数组中只出现一次的数字O"></a>数组中只出现一次的数字O</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">数组中数字均有重复，只有两个数分别都唯一，找出这两个数</span></span><br><span class="line"><span class="comment">输入:[2,5,2,7,3,2,3]</span></span><br><span class="line"><span class="comment">输出:[5,7]</span></span><br><span class="line"><span class="comment">思路： 数组所有数异或之后，[异或 同：0 不同：1]</span></span><br><span class="line"><span class="comment">剩下两个数， 此时 5    7</span></span><br><span class="line"><span class="comment">              0101 异或 0111 = 0010 </span></span><br><span class="line"><span class="comment">              用0001 和 0010 异或 如果不为1 ，0001 左移一位，步长++(jud &lt;&lt; 1);</span></span><br><span class="line"><span class="comment">              之后就把 0101 和 0111 区分开来</span></span><br><span class="line"><span class="comment">              if(jud ^ nums) x ^= nums;</span></span><br><span class="line"><span class="comment">              else y ^= nums;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> x : nums)</span><br><span class="line">            res ^= x;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组中只出现一次的数字I"><a href="#数组中只出现一次的数字I" class="headerlink" title="数组中只出现一次的数字I"></a>数组中只出现一次的数字I</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 136</span></span><br><span class="line"><span class="comment">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</span></span><br><span class="line"><span class="comment">示例 1:</span></span><br><span class="line"><span class="comment">输入: [2,2,1]</span></span><br><span class="line"><span class="comment">输出: 1</span></span><br><span class="line"><span class="comment">示例 2:</span></span><br><span class="line"><span class="comment">输入: [4,1,2,1,2]</span></span><br><span class="line"><span class="comment">输出: 4</span></span><br><span class="line"><span class="comment">思路： 每个数相互异或 得到的那个数就是只出现一次的数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组中只出现一次的数字II"><a href="#数组中只出现一次的数字II" class="headerlink" title="数组中只出现一次的数字II"></a>数组中只出现一次的数字II</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 137</span></span><br><span class="line"><span class="comment">给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</span></span><br><span class="line"><span class="comment">说明：</span></span><br><span class="line"><span class="comment">你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</span></span><br><span class="line"><span class="comment">示例 1:</span></span><br><span class="line"><span class="comment">输入: [2,2,3,2]</span></span><br><span class="line"><span class="comment">输出: 3</span></span><br><span class="line"><span class="comment">示例 2:</span></span><br><span class="line"><span class="comment">输入: [0,1,0,1,0,1,99]</span></span><br><span class="line"><span class="comment">输出: 99</span></span><br><span class="line"><span class="comment">思路： [ 0010, 0010, 0011, 0010 ]</span></span><br><span class="line"><span class="comment">右移0位[ xxx0, xxx0, xxx1, xxx0 ]异或[ 0001 ] = [ 0, 0, 1, 0 ] =&gt;sum= 1 ;cout += sum % 3  = 1;</span></span><br><span class="line"><span class="comment">右移1位[ xxx1, xxx1, xxx1, xxx1 ]异或[ 0001 ] = [ 1, 1, 1, 1 ] =&gt;sum= 4 ;cout += sum % 3 = 1+ sum = 2;</span></span><br><span class="line"><span class="comment">右移2位[ xxx0, xxx0, xxx0, xxx0 ]异或[ 0000 ] = [ 0, 0, 0, 0 ] =&gt;sum= 0 ;cout += sum % 3 = 0+ sum = 2;</span></span><br><span class="line"><span class="comment">右移3位[ xxx0, xxx0, xxx0, xxx0 ]异或[ 0000 ] = [ 0, 0, 0, 0 ] =&gt;sum= 0 ;cout += sum % 3 = 0+ sum = 2;</span></span><br><span class="line"><span class="comment">输入为 0001左移0位 + 0001左移1位 ；</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k= <span class="number">0</span>; k &lt; <span class="number">32</span>; k++)&#123;</span><br><span class="line">           <span class="keyword">int</span> mask  = <span class="number">1</span> &lt;&lt; k ;</span><br><span class="line">           <span class="keyword">int</span> <span class="built_in">cout</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> num : nums)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num &amp; mask) <span class="built_in">cout</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">cout</span> % <span class="number">3</span> != <span class="number">0</span>) res |= mask;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="子串变位词-有效的字母异位词"><a href="#子串变位词-有效的字母异位词" class="headerlink" title="子串变位词(有效的字母异位词)"></a>子串变位词(有效的字母异位词)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">给定两个串a和b，问b是否是a的子串的变位词</span></span><br><span class="line"><span class="comment">例：</span></span><br><span class="line"><span class="comment">a = hello , b = lel,lle,ello 都是 true</span></span><br><span class="line"><span class="comment">            b = elo 是false</span></span><br><span class="line"><span class="comment">思路:</span></span><br><span class="line"><span class="comment">滑动窗口 + 维护数组</span></span><br><span class="line"><span class="comment">array[26] = 0</span></span><br><span class="line"><span class="comment">for(int index : b.size() -1) </span></span><br><span class="line"><span class="comment">array[b[index] - 'a'] ++; onZero++;  a['l'] a['e' = 4]   onZero = 3;</span></span><br><span class="line"><span class="comment">                                        2      1</span></span><br><span class="line"><span class="comment">for(int index : a.size() -1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">array[a[index] - 'a'] -- == 0; onZero --; //if(onZero == 0) -&gt; true;</span></span><br><span class="line"><span class="comment">a['h'] a['e'] a['l']</span></span><br><span class="line"><span class="comment">  -1     0      1</span></span><br><span class="line"><span class="comment">array[a[index] - 'a'] -- == -1; onZero ++;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">index 会滑动</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;不修改数组找出重复的数字&quot;&gt;&lt;a href=&quot;#不修改数组找出重复的数字&quot; class=&quot;headerlink&quot; title=&quot;不修改数组找出重复的数字&quot;&gt;&lt;/a&gt;不修改数组找出重复的数字&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Ks8概念总结</title>
    <link href="http://yoursite.com/2019/08/13/KS8%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/13/KS8概念总结/</id>
    <published>2019-08-12T16:02:24.140Z</published>
    <updated>2019-08-27T09:09:19.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="KS8概念总结"><a href="#KS8概念总结" class="headerlink" title="KS8概念总结"></a>KS8概念总结</h1><h2 id="模型图"><a href="#模型图" class="headerlink" title="模型图"></a>模型图</h2><h4 id="技术迭代"><a href="#技术迭代" class="headerlink" title="技术迭代"></a>技术迭代</h4><h4 id="部署大规模集群"><a href="#部署大规模集群" class="headerlink" title="部署大规模集群"></a><img src="/images/1565591075478.png" alt="1565591075478">部署大规模集群</h4><p><img src="/images/1565591221738.png" alt="1565591221738"></p><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p><img src="/images/1565591281369.png" alt="1565591281369"></p><p>架构</p><p><img src="/images/1565591525113.png" alt="1565591525113"></p><p><img src="/images/1565591833794.png" alt="1565591833794"></p><h2 id="实现高可用架构"><a href="#实现高可用架构" class="headerlink" title="实现高可用架构"></a>实现高可用架构</h2><h4 id="三大指标"><a href="#三大指标" class="headerlink" title="三大指标"></a>三大指标</h4><ul><li>高可用、高性能、高并发</li></ul><p>Zookeeper</p><ol><li>负载均衡：实现轮询机制。防止阻塞</li><li>集群：必须实现数据同步，Redis</li><li>高可用：一直可用，实现崩溃恢复 A（down &amp; resume) B(up) C</li></ol><h2 id="ks8高可用集群搭建"><a href="#ks8高可用集群搭建" class="headerlink" title="ks8高可用集群搭建"></a>ks8高可用集群搭建</h2><h3 id="节点配置"><a href="#节点配置" class="headerlink" title="节点配置"></a>节点配置</h3><p><img src="/images/1565592314612.png" alt="1565592314612"></p><p>步骤：</p><ol><li><h4 id="关闭交换空间"><a href="#关闭交换空间" class="headerlink" title="关闭交换空间"></a>关闭交换空间</h4></li><li><h4 id="避免开机启动交换空间"><a href="#避免开机启动交换空间" class="headerlink" title="避免开机启动交换空间"></a>避免开机启动交换空间</h4></li><li><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4></li><li><h4 id="配置-DNS"><a href="#配置-DNS" class="headerlink" title="配置 DNS"></a>配置 DNS</h4></li><li><h4 id="安装-Docke"><a href="#安装-Docke" class="headerlink" title="安装 Docke"></a>安装 Docke</h4></li><li><h4 id="配置-Docker-加速器"><a href="#配置-Docker-加速器" class="headerlink" title="配置 Docker 加速器"></a>配置 Docker 加速器</h4></li><li><h4 id="安装-kubeadm，kubelet，kubectl"><a href="#安装-kubeadm，kubelet，kubectl" class="headerlink" title="安装 kubeadm，kubelet，kubectl"></a>安装 kubeadm，kubelet，kubectl</h4></li><li><h4 id="同步时间-时间要统一"><a href="#同步时间-时间要统一" class="headerlink" title="同步时间:时间要统一"></a>同步时间:时间要统一</h4></li><li><h4 id="配置-IPVS"><a href="#配置-IPVS" class="headerlink" title="配置 IPVS"></a>配置 IPVS</h4></li><li><h4 id="配置内核参数"><a href="#配置内核参数" class="headerlink" title="配置内核参数\"></a>配置内核参数\</h4></li><li><h4 id="修改-cloud-cfg-是修改hostname"><a href="#修改-cloud-cfg-是修改hostname" class="headerlink" title="修改 cloud.cfg 是修改hostname"></a>修改 cloud.cfg 是修改hostname</h4></li></ol><h3 id="单独节点"><a href="#单独节点" class="headerlink" title="单独节点"></a>单独节点</h3><ol><li><h3 id="配置-IP"><a href="#配置-IP" class="headerlink" title="配置 IP"></a>配置 IP</h3></li><li><h3 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h3></li><li><h2 id="安装-HAProxy-（高可用）-Keepalived（负载均衡）"><a href="#安装-HAProxy-（高可用）-Keepalived（负载均衡）" class="headerlink" title="安装 HAProxy （高可用）+ Keepalived（负载均衡）"></a>安装 HAProxy （高可用）+ Keepalived（负载均衡）</h2><ol><li><h3 id="Keepalived概述"><a href="#Keepalived概述" class="headerlink" title="Keepalived概述"></a>Keepalived概述</h3><h4 id="ks8-Master阶段运行组件"><a href="#ks8-Master阶段运行组件" class="headerlink" title="ks8 Master阶段运行组件"></a>ks8 Master阶段运行组件</h4></li></ol><ul><li><p>kube-apiserver:提供资源操作的唯一入口（提供认证、授权、访问控制、api注册和发现)</p></li><li><p>kube-scheduler：负责资源调度 ，将pod调度到相应机器上。</p></li><li><p>kube-controller-manager：负责维护集群状态（故障检测、自动扩展。。。）</p><h4 id="Keepalived"><a href="#Keepalived" class="headerlink" title="Keepalived"></a>Keepalived</h4><p>当master挂了，将其他slaver接上去</p><p>实现图解</p><p><img src="/images/1565593821985.png" alt="1565593821985"></p></li></ul></li></ol><ol start="4"><li><h2 id="部署-Kubernetes-集群"><a href="#部署-Kubernetes-集群" class="headerlink" title="部署 Kubernetes 集群"></a>部署 Kubernetes 集群</h2><ol><li><h3 id="初始化-Master"><a href="#初始化-Master" class="headerlink" title="初始化 Master"></a>初始化 Master</h3></li><li><h3 id="加入-Master-节点"><a href="#加入-Master-节点" class="headerlink" title="加入 Master 节点"></a>加入 Master 节点</h3></li><li><h3 id="加入-Node-节点"><a href="#加入-Node-节点" class="headerlink" title="加入 Node 节点"></a>加入 Node 节点</h3></li><li><h3 id="验证集群状态"><a href="#验证集群状态" class="headerlink" title="验证集群状态"></a>验证集群状态</h3></li><li><h3 id="验证高可用"><a href="#验证高可用" class="headerlink" title="验证高可用"></a>验证高可用</h3><p>注意 重启之后ipvs要重新执行一哈</p><p><img src="/images/1565595057809.png" alt="1565595057809"></p></li></ol></li></ol><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="解决Node无法加入集群"><a href="#解决Node无法加入集群" class="headerlink" title="解决Node无法加入集群"></a>解决Node无法加入集群</h4><p>替换 Calico（网络插件） 网段为我们虚拟机不重叠的网段（这里用的是 Flannel 默认网段）</p><p>如果Calico网段与master、slaver网段重叠就会导致Node无法加入集群。</p><ol><li>ks8重置</li><li>删除kubectl配置</li><li>启动ipvs</li><li>导出并修改配置文件 改calico网段</li><li>kubeadm初始化</li><li>配置kubectl</li><li>下载Calico 配置文件并修改 611 行 /name: CALICO_IPV$POOL_CIDR 的value</li><li>直接应用本地Calico</li><li>加入Master结点（最后 配置mkdir babbalala~~ dubectl get node)</li></ol><h2 id="通过资源配置运行容器-部署容器-测试"><a href="#通过资源配置运行容器-部署容器-测试" class="headerlink" title="通过资源配置运行容器(部署容器)测试"></a>通过资源配置运行容器(部署容器)测试</h2><h3 id="启动顺序"><a href="#启动顺序" class="headerlink" title="启动顺序"></a>启动顺序</h3><ol><li><p>Pod</p></li><li><p>Deployment 内部访问</p></li><li><p>Service 外部访问机制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node #结点状态</span><br><span class="line">master01: vi /kubernetes/yml/nginx-deployment.yml #设置deployment</span><br><span class="line">kubectl create -f nginx-deployment.yml</span><br><span class="line">kubectl get pod #查看pod</span><br><span class="line">kubectl get deployment #看看deployment 开两个实例</span><br><span class="line">master01: vi /kubernetes/yml/ nginx-service.yml #设置service</span><br><span class="line">kubectl get service #查看service</span><br><span class="line">端口： 80：30066  （30066指的是node 的pod暴露30066端口，再由pod映射到nginx 的80端口）</span><br><span class="line">kubectl describe service nginx-http #下面</span><br><span class="line">NodePort: 30066/TCP</span><br><span class="line"><span class="meta">#</span>使用LoadBalancer master slaver 端口都暴露</span><br><span class="line">master01：30066</span><br><span class="line">master02：30066</span><br><span class="line">slaver01：30066</span><br><span class="line">slaver02: 30066</span><br><span class="line">kubectl delete -f nginx-service.yml #停掉</span><br><span class="line"><span class="meta">#</span>想要把30066改成80端口</span><br><span class="line">vi /kubernetes/yml/ nginx-service.yml</span><br><span class="line">prots:</span><br><span class="line">-prot: 80 #Service 端口</span><br><span class="line">targetPort: 80 #Pod 端口 将Service暴露端口转发到Pod端口上</span><br><span class="line">nodePort: 80 # 本来是30066  但是报错 他的范围30000-32767</span><br><span class="line">kubectl create -f nginx-service.yml #重开</span><br><span class="line"><span class="meta">#</span>解决办法</span><br><span class="line">vi /etc/kubernetes/manitestls/kube-apiserver.yml</span><br><span class="line"><span class="meta">#</span>增加配置</span><br><span class="line">--service-node-prot-range=2-65545</span><br><span class="line"><span class="meta">#</span>ks8重启  或者 他自动重启</span><br><span class="line"><span class="meta">#</span>验证</span><br><span class="line">kubectl create -f nginx-service.yml</span><br><span class="line">kubectl describe service nginx-http</span><br></pre></td></tr></table></figure></li></ol><h2 id="Ingress统一访问入口"><a href="#Ingress统一访问入口" class="headerlink" title="Ingress统一访问入口"></a>Ingress统一访问入口</h2><h3 id="ClusterIP服务"><a href="#ClusterIP服务" class="headerlink" title="ClusterIP服务"></a>ClusterIP服务</h3><p>内部访问方式：外部proxy模式访问内部</p><p><img src="/images/1565611874845.png" alt="1565611874845"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service</span><br><span class="line">   type</span><br><span class="line">   ClusterIP</span><br></pre></td></tr></table></figure><h3 id="三种外部访问方式"><a href="#三种外部访问方式" class="headerlink" title="三种外部访问方式"></a>三种外部访问方式</h3><h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><p>在所有节点（虚拟机）上开放一个特定端口</p><ul><li>每个端口一种服务</li><li>默认模式（官方不推荐）</li><li>调试的时候用</li></ul><p><img src="/images/1565612144152.png" alt="1565612144152"></p><h4 id="LoadBalancer"><a href="#LoadBalancer" class="headerlink" title="LoadBalancer"></a>LoadBalancer</h4><p>在NodePort加了负载均衡</p><h4 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h4><p>扮演智能路由 或 集</p><p>群入口 （类似API网关）</p><p><img src="/images/1565612349113.png" alt="1565612349113"></p><p>例如：部署Tomcat只允许在内网访问，需要Ingress提供反向代理功能路由到Tomcat上</p><ol><li><p>部署Tomcat  tomcat.yml（Devlopment+Service）</p><p>ClusterIP设置</p><p><code>watch kubectl get pods # 查看运行状态</code></p><p><code>kubectl get deployment</code></p><p><code>kubectl get  service</code></p><p><code>kubectl describe service tomcat-http</code> 没有nodeport 限制外网访问</p><p><img src="/images/1565613146789.png" alt="1565613146789"></p></li><li><p>下载Nginx Ingress Controller 配置文件 &amp; 修改</p><p><code>hostNetwork: true</code></p><p><code>kubectl get pods -all -namespaces</code></p><p>多了 <code>ingress-nginx</code></p></li><li><p>部署ingress  -&gt; ingress.yml</p></li><li><p><code>kubectl get pods -n ingress-nginx -o wide</code></p><p>ip: 192.168.141.161</p></li><li><p>SwitchHosts  : 192.168.141.161 域名</p></li></ol><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><p>NFS+PV/PVC</p><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h3><p>RPC通信，分布式文件系统</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><ol><li>安装NFS服务端</li><li>安装NFS客户端</li><li>验证NFS服务</li></ol><h3 id="PV和PVC"><a href="#PV和PVC" class="headerlink" title="PV和PVC"></a>PV和PVC</h3><p>持久卷提供者 持久卷消费者 NFS网络方案</p><p>pv：规格集群资源</p><p>pvc：分配集群资源</p><p><img src="/images/1565624573158.png" alt="1565624573158"></p><ol><li><p>create pv.yml    pvc.yml</p></li><li><p>部署mysql 8 连接pv pvc</p><p>出现问题：没有个性化配置</p></li></ol><h3 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h3><p>用来存储配置文件的ks8资源对象，放在etcd内，一种外挂配置。解耦</p><p>即：可是用ConfigMap配置MYSQL</p><h2 id="Dashboard"><a href="#Dashboard" class="headerlink" title="Dashboard"></a>Dashboard</h2><p>运行界面</p><h2 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h2><p>环境：</p><ul><li>java</li><li>git</li><li>mvn</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;KS8概念总结&quot;&gt;&lt;a href=&quot;#KS8概念总结&quot; class=&quot;headerlink&quot; title=&quot;KS8概念总结&quot;&gt;&lt;/a&gt;KS8概念总结&lt;/h1&gt;&lt;h2 id=&quot;模型图&quot;&gt;&lt;a href=&quot;#模型图&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="分布式" scheme="http://yoursite.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="kubernetes" scheme="http://yoursite.com/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>时间算法对应使用算法</title>
    <link href="http://yoursite.com/2019/08/11/%E6%97%B6%E9%97%B4%E7%AE%97%E6%B3%95%E5%AF%B9%E5%BA%94%E4%BD%BF%E7%94%A8%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/08/11/时间算法对应使用算法/</id>
    <published>2019-08-11T13:49:10.802Z</published>
    <updated>2019-08-11T13:52:44.814Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间算法对应使用算法"><a href="#时间算法对应使用算法" class="headerlink" title="时间算法对应使用算法"></a>时间算法对应使用算法</h2><p>1s 2s</p><p>c++:指令执行次数：10^8</p><p>n &lt;=30, 指数级别； dfs+ 剪枝</p><p>n &lt;= 100 n^3 floyd</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;时间算法对应使用算法&quot;&gt;&lt;a href=&quot;#时间算法对应使用算法&quot; class=&quot;headerlink&quot; title=&quot;时间算法对应使用算法&quot;&gt;&lt;/a&gt;时间算法对应使用算法&lt;/h2&gt;&lt;p&gt;1s 2s&lt;/p&gt;
&lt;p&gt;c++:指令执行次数：10^8&lt;/p&gt;
&lt;p&gt;n 
      
    
    </summary>
    
      <category term="c++" scheme="http://yoursite.com/categories/c/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ</title>
    <link href="http://yoursite.com/2019/08/11/RabbitMQ/"/>
    <id>http://yoursite.com/2019/08/11/RabbitMQ/</id>
    <published>2019-08-11T13:43:39.605Z</published>
    <updated>2019-08-11T14:55:04.892Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h2 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h2><ol><li>用户</li><li>数据库</li><li>授权</li><li>Overview</li><li>Ports and contexts<ul><li>amqp协议</li><li>clustering</li><li>http</li></ul></li><li>Connections</li><li>Channels</li><li>Exchanges</li><li>Queues</li><li>Admin</li></ol><h2 id="简单队列示例"><a href="#简单队列示例" class="headerlink" title="简单队列示例"></a>简单队列示例</h2><h3 id="RabbitMQ消息队列"><a href="#RabbitMQ消息队列" class="headerlink" title="RabbitMQ消息队列"></a>RabbitMQ消息队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//获取MQ连接的工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtiles</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//连接工厂</span></span><br><span class="line">        ConnectionFactory factory = <span class="keyword">new</span> ConnectionFactory();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置服务地址</span></span><br><span class="line">        factory.setHost(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//端口AHQP 5672</span></span><br><span class="line">        factory.setPort(<span class="number">5672</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//vhost</span></span><br><span class="line">        facotry.setVirtualHost(<span class="string">"/newMySql"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用户名</span></span><br><span class="line">        factory.setUsername(<span class="string">"miki"</span>);</span><br><span class="line">        <span class="comment">//密码</span></span><br><span class="line">        facotry.setPassword(<span class="string">"miki666"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取连接</span></span><br><span class="line">        <span class="keyword">return</span> factory.newConnection();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_simple_queue"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">   <span class="comment">//发送</span></span><br><span class="line">        String msg = <span class="string">"hello simpel"</span>;</span><br><span class="line">        </span><br><span class="line">        channel.basePublish(<span class="string">""</span>,QUEUE_NAME，<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        channel.close();</span><br><span class="line">        conneciton.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_simple_queue"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//=============老版本====================================================</span></span><br><span class="line">        <span class="comment">//定义队列的消费者</span></span><br><span class="line">        QueueingConsumer consumer = <span class="keyword">new</span> QueueingConsumer(channel);</span><br><span class="line">        <span class="comment">//监听</span></span><br><span class="line">        channel.basicConsumer(QUEUE_NAME,<span class="keyword">true</span>,consumer);</span><br><span class="line">          <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            Doliver dalivery = consumer.nextDelivery();</span><br><span class="line">            String msgString = <span class="keyword">new</span> String(dalivery.getBody());</span><br><span class="line">            sout(msgString);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//===================老版本=============================================</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">          <span class="comment">//===================新版本=============================================</span></span><br><span class="line">        <span class="comment">//观察者模式 队列有数据  消费者DefaultConsumer lamdba -&gt;  channel 回调 handleDelivery </span></span><br><span class="line">        <span class="comment">//这里重写方法</span></span><br><span class="line">        <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,Envelope envelope,BasicProperties properties,<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                scout(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//消费者监听队列 阻塞  -》 android  Button 监听事件 addListener</span></span><br><span class="line">        channel.basicConsumer(QUEUE_NAME,<span class="keyword">true</span>,consumer);</span><br><span class="line">        </span><br><span class="line">          <span class="comment">//===================新版本=============================================</span></span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>旧：监听消费者，while循环当有消息时return 新：channel被消费者监听时，回调 handleDelivery。</p><h3 id="简单队列不足"><a href="#简单队列不足" class="headerlink" title="简单队列不足"></a>简单队列不足</h3><ul><li>耦合性高，生产者一一对应消费者，当出现多个消费者消费队列则不行；队列名变更，同时变更（生产者，消费者）。</li><li>消费者与业务结合，消费者接受消息进行处理，需要时间，就会在队列积压很多消息。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>工作队列：一个生产者对应多个消费者。</li></ul><h2 id="工作队列"><a href="#工作队列" class="headerlink" title="工作队列"></a>工作队列</h2><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Send</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException,TimeoutException</span>&#123;</span><br><span class="line">        <span class="comment">/*           |--c1</span></span><br><span class="line"><span class="comment">        * p --Queue--|</span></span><br><span class="line"><span class="comment">        *            |--c2</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">          <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">50</span> ; i++ )&#123;</span><br><span class="line">            String msg = <span class="string">"hello"</span> + i;</span><br><span class="line">            channel.basicPublish(<span class="string">""</span>,QUEUE_NAME,<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line">            Thread.sleep(i*<span class="number">10</span>);  <span class="comment">// 抛出异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者more"><a href="#消费者more" class="headerlink" title="消费者more"></a>消费者more</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_work_queue"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义消费者</span></span><br><span class="line">        Consumer consumer =  <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,Envelope envelope,BasicProperties properties,<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                scout(msg);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedExceptin e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    scout(<span class="string">"done"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">boolean</span>.autoAck =<span class="keyword">true</span>;</span><br><span class="line">      channel.basicConsumer(QUEUE_NAME,autoAck,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者2</span></span><br><span class="line">同理</span><br></pre></td></tr></table></figure><h3 id="简单队列不足-1"><a href="#简单队列不足-1" class="headerlink" title="简单队列不足"></a>简单队列不足</h3><ul><li>消费者1 &amp; 2 处理的消息都是一样：轮询分发（round-robin),无论谁忙谁闲，都不会都给，都是你一个我一个均摊分发。</li></ul><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用basicQos（perfetch =1 ），消费者手动反馈（我已经做完了),即关闭自动应答ack改为手动。</p><h3 id="公平分发Fair-dispatch"><a href="#公平分发Fair-dispatch" class="headerlink" title="公平分发Fair dispatch"></a>公平分发Fair dispatch</h3><h4 id="消费者加入回执操作"><a href="#消费者加入回执操作" class="headerlink" title="消费者加入回执操作"></a>消费者加入回执操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要发送确认消息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line"> <span class="comment">//~~~~~~~~获取连接~~~~~~~   </span></span><br><span class="line">    <span class="comment">//~~~~~~~获取channel~~~~~~~~</span></span><br><span class="line">    <span class="comment">//~~~~~~~~声明队列~~~~~~~</span></span><br><span class="line">    <span class="comment">//每个消费者发送确认消息之前，消息队列不发送下一个消息到消费者，一次只处理一次数据</span></span><br><span class="line">    channel.basicQos(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Channel channel = new DefaultConsumer(channel) ~~~</span></span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    scout(<span class="string">"done"</span>);</span><br><span class="line">    <span class="comment">//手动回执</span></span><br><span class="line">    channel.basicAck(envelope.getDeliveryTag(),fasle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="keyword">boolean</span> autoAck = <span class="keyword">true</span>;</span><br><span class="line">    channel.basciConsumer(QUEUE_NAME,autoAck,consumer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="消息应答与持久化"><a href="#消息应答与持久化" class="headerlink" title="消息应答与持久化"></a>消息应答与持久化</h4><p><code>boolean autoAck = true;</code> (自动确认模式)，一旦rebbit消息分发给消费者，消息就会从内存中删除。</p><p>坏处：如果消费者突然失败，就会丢失正在处理的消息。</p><p><code>boolean autoAck = false</code>(默认，手动确认模式)，如果消费者突然失败，就会将消息交付给其他消费者。</p><p>Message acknowlegment</p><p>​    rabbitmq挂了，消息也会丢失 。解决方案-&gt;持久化</p><p><code>boolean durable = false</code></p><p><code>channel.queueDeclare(QUEUE_NAME,durable)</code>  // 报错原因：把durable把false改true不可，是因为已经定义了QUEUE_NAME=test_work_queue，这个队列是未持久化，不可重新定义已存在的队列。重建一个队列（改名字）就可定义持久化。</p><h3 id="工作队列缺点"><a href="#工作队列缺点" class="headerlink" title="工作队列缺点"></a>工作队列缺点</h3><p>生产者发送的消息不能被消费者共享。</p><h2 id="订阅模式"><a href="#订阅模式" class="headerlink" title="订阅模式"></a>订阅模式</h2><h3 id="交互机模型"><a href="#交互机模型" class="headerlink" title="交互机模型"></a>交互机模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*             --&gt;|--queue --&gt;c1</span></span><br><span class="line"><span class="comment">     * p --X--|</span></span><br><span class="line"><span class="comment">     *         --&gt;|--queue --&gt;c2</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><ol><li>一个生产者多个消费者</li><li>每个消费者有自己的队列</li><li>生产者把消息发到交换机</li><li>队列要绑定到交换机</li><li>生产者发送 -&gt;消息 -&gt; 交换机 –&gt; 队列：实现一个消息被多个消费者消费。</li></ol><p>例如：商品名字改了，搜索引擎改，前台变。</p><h3 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"test_exchange_fanout"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明 交换机</span></span><br><span class="line">   channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">"fanout"</span>);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        String msg = <span class="string">"hello"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,<span class="string">""</span>,<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line">        scout(<span class="string">"Send"</span> +msg);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//close</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者one"><a href="#消费者one" class="headerlink" title="消费者one"></a>消费者one</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_exchange_fanout_email"</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"test_exchange_fanout"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">""</span>)</span><br><span class="line">        <span class="comment">//定义消费者</span></span><br><span class="line">        Consumer consumer =  <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,Envelope envelope,BasicProperties properties,<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                scout(msg);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedExceptin e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    scout(<span class="string">"done"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">boolean</span>.autoAck =<span class="keyword">true</span>;</span><br><span class="line">      channel.basicConsumer(QUEUE_NAME,autoAck,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者two"><a href="#消费者two" class="headerlink" title="消费者two"></a>消费者two</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_exchange_fanout_sms"</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"test_exchange_fanout"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">""</span>)</span><br><span class="line">        <span class="comment">//定义消费者</span></span><br><span class="line">        Consumer consumer =  <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,Envelope envelope,BasicProperties properties,<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                scout(msg);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedExceptin e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    scout(<span class="string">"done"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">boolean</span>.autoAck =<span class="keyword">true</span>;</span><br><span class="line">      channel.basicConsumer(QUEUE_NAME,autoAck,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现象：消费者1 消费者2 共享生产者发送的消息</p><h3 id="交换机缺点"><a href="#交换机缺点" class="headerlink" title="交换机缺点"></a>交换机缺点</h3><p>一方面接收生产者消息，另一方面向队列推送消息。但是不能把消息交给指定queue</p><ul><li>无交换机</li></ul><p><code>channel.basicPublish(&quot;&quot;,&quot;&quot;)</code></p><p>改变 -&gt; 有交换机 没有路由</p><p><code>channel.exchangeDeclare(EXCHANGE_NAME,&quot;fanout&quot;)</code> //不处理路由链</p><p><code>channel.basicPublish(EXCHANGE_NAME,&quot;&quot;)</code></p><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><h3 id="路由模型"><a href="#路由模型" class="headerlink" title="路由模型"></a>路由模型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*            |  -error-&gt;|--queue --&gt;c1</span></span><br><span class="line"><span class="comment">     * p --X ：key--|</span></span><br><span class="line"><span class="comment">     *        |   -info-&gt;|</span></span><br><span class="line"><span class="comment">     *        |-warning-&gt;|  --queue --&gt;c2</span></span><br><span class="line"><span class="comment">     *        |  -error-&gt;|</span></span><br></pre></td></tr></table></figure><h3 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"test_exchange_direct"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明 交换机 + 路由 direct</span></span><br><span class="line">   channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">"direct"</span>);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        String msg = <span class="string">"hello"</span>;</span><br><span class="line">        String routingKey = <span class="string">"error"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,routingKey,<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line">        scout(<span class="string">"Send"</span> +msg);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//close</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_exchange_direct"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_queue_direct_i"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">"error"</span>);</span><br><span class="line">        <span class="comment">//绑定多个</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">"info"</span>);</span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">"warning"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//定义消费者</span></span><br><span class="line">        Consumer consumer =  <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,Envelope envelope,BasicProperties properties,<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                scout(msg);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedExceptin e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    scout(<span class="string">"done"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">boolean</span>.autoAck =<span class="keyword">true</span>;</span><br><span class="line">      channel.basicConsumer(QUEUE_NAME,autoAck,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路由模式缺点"><a href="#路由模式缺点" class="headerlink" title="路由模式缺点"></a>路由模式缺点</h3><p>生产者路由key只能一个。不能多个匹配，即不能多对多。</p><h2 id="主题模式"><a href="#主题模式" class="headerlink" title="主题模式"></a>主题模式</h2><p>主题模型</p><p><img src="/images/1565530396700.png" alt="1565530396700"></p><p>模式匹配</p><ul><li>#匹配一个或多个</li><li>*匹配一个</li></ul><p>生产者：商品-&gt;发布（goods.add) 删除 修改 查询</p><p>消费者1：(goods.add)</p><p>消费者2：(goods.#)</p><h3 id="生产者-4"><a href="#生产者-4" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXCHANGE_NAME = <span class="string">"test_exchange_topic"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明 交换机 + 路由 direct</span></span><br><span class="line">   channel.exchangeDeclare(EXCHANGE_NAME,<span class="string">"topic"</span>);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        String msg = <span class="string">"商品 .."</span>;</span><br><span class="line">        String routingKey = <span class="string">"goods.add"</span>;</span><br><span class="line">        channel.basicPublish(EXCHANGE_NAME,routingKey,<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line">        scout(<span class="string">"Send"</span> +msg);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//close</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_exchange_direct"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_queue_direct_i"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绑定队列到交换机</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">"goods.add"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//消费者2---------------------------------------</span></span><br><span class="line">        channel.queueBind(QUEUE_NAME,EXCHANGE_NAME,<span class="string">"goods.#"</span>);</span><br><span class="line">        <span class="comment">//消费者2---------------------------------------</span></span><br><span class="line">        channel.basicQos(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//定义消费者</span></span><br><span class="line">        Consumer consumer =  <span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,Envelope envelope,BasicProperties properties,<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">                String msg = <span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>);</span><br><span class="line">                scout(msg);</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(InterruptedExceptin e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                    scout(<span class="string">"done"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">boolean</span>.autoAck =<span class="keyword">true</span>;</span><br><span class="line">      channel.basicConsumer(QUEUE_NAME,autoAck,consumer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在路由的基础上，消费者多了匹配符，简化消费者用多个通道来对应queue。</p><p>即，主题模式更加符合模块化接收，（从一个管子变成口子）</p><h2 id="消息确认机制（事务-confirm"><a href="#消息确认机制（事务-confirm" class="headerlink" title="消息确认机制（事务+confirm)"></a>消息确认机制（事务+confirm)</h2><p>通过持久化数据，解决消费者异常导致数据丢失问题。但是不知道消息发出去是否接收到。</p><p>两种解决方案</p><ol><li>AMQP实现事务机制（类似mysql）</li><li>Confirm模式</li></ol><h3 id="AMQP实现事务机制"><a href="#AMQP实现事务机制" class="headerlink" title="AMQP实现事务机制"></a>AMQP实现事务机制</h3><ol><li>txSelect:用于用户将当前channel设置成transation模式</li><li>txCommit：用于提交事务</li><li>txRoolback：回滚事务</li></ol><h3 id="生产者-5"><a href="#生产者-5" class="headerlink" title="生产者"></a>生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_queue_tx"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明 交换机 + 路由 direct</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//发送消息</span></span><br><span class="line">        String msg = <span class="string">"hello tx .."</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        channel.txSelect();</span><br><span class="line">        channel.basicPublish(<span class="string">""</span>,QUEUE_NAME,<span class="keyword">null</span>,msg.getBytes());</span><br><span class="line">            <span class="comment">//------异常------</span></span><br><span class="line">            <span class="comment">// int x = 1/0;</span></span><br><span class="line">             <span class="comment">//------异常------</span></span><br><span class="line">        channel.txCommit();</span><br><span class="line">        scout(<span class="string">"Send"</span> +msg);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            channel.txRollback();</span><br><span class="line">            scout(<span class="string">"tx rollback"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//close</span></span><br><span class="line">        channel.close();</span><br><span class="line">        connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费者-3"><a href="#消费者-3" class="headerlink" title="消费者"></a>消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Recv</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE_NAME = <span class="string">"test_queue_tx"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//拿到连接</span></span><br><span class="line">        Connection connection = ConnectionUtils.getConnection();</span><br><span class="line">        <span class="comment">//创建通道</span></span><br><span class="line">        Channel channle = connection.createChannel();</span><br><span class="line">        <span class="comment">//队列 声明</span></span><br><span class="line">   channel.queueDeclare(QUEUE_NAME,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">false</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//定义消费者</span></span><br><span class="line">        Consumer consumer = <span class="keyword">boolean</span>.autoAck =<span class="keyword">true</span>;</span><br><span class="line">      channel.basicConsume(QUEUE_NAME,<span class="keyword">true</span>,<span class="keyword">new</span> DefaultConsumer(channel)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDelivery</span><span class="params">(String consumerTag,Envelope envelope,BasicProperties properties,<span class="keyword">byte</span>[] body)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">                scout(<span class="keyword">new</span> String(body,<span class="string">"utf-8"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缺点：事务的大量提交，会降低生产者的吞吐量。</p><h3 id="Confirm模式"><a href="#Confirm模式" class="headerlink" title="Confirm模式"></a>Confirm模式</h3><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ&quot;&gt;&lt;a href=&quot;#RabbitMQ&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ&quot;&gt;&lt;/a&gt;RabbitMQ&lt;/h1&gt;&lt;h2 id=&quot;控制台&quot;&gt;&lt;a href=&quot;#控制台&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="RabbitMQ" scheme="http://yoursite.com/tags/RabbitMQ/"/>
    
      <category term="消息队列" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>oAth2(二)</title>
    <link href="http://yoursite.com/2019/08/09/oAuth2%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/08/09/oAuth2案例/</id>
    <published>2019-08-09T05:42:09.965Z</published>
    <updated>2019-08-11T13:46:01.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oAuth2案例"><a href="#oAuth2案例" class="headerlink" title="oAuth2案例"></a>oAuth2案例</h1><h2 id="内存、jdbc存储令牌"><a href="#内存、jdbc存储令牌" class="headerlink" title="内存、jdbc存储令牌"></a>内存、jdbc存储令牌</h2><p><img src="/images/1565329333875.png" alt="1565329333875"></p><ol><li><p>AuthorizationServerConfiguration:认证client、secret 和授权码通过 提供资源</p><p><a href="http://client:secret@localhost:8080/oauth/token=" target="_blank" rel="noopener">http://client:secret@localhost:8080/oauth/token=</a> 授权码</p></li><li><p>WebSecurityConfiguartion：认证功能 提供授权码</p><p>文字流程：用户 -》web（账户） 获得授权码；  用户post：client_id:secret+授权码 获得 scope区域内的资源。</p></li></ol><p><img src="/images/1565329459474.png" alt="1565329459474"></p><h3 id="角色的权限访问控制"><a href="#角色的权限访问控制" class="headerlink" title="角色的权限访问控制"></a>角色的权限访问控制</h3><ol><li><p>RBAC 角色</p></li><li><p>ACL 控制列表</p></li><li><p>ABAC 属性</p></li><li><p>PBAC 策略</p><p>来源：论文、社区、RFC6749</p></li></ol><h4 id="RBAC：最小权限、责任分离、数据抽象"><a href="#RBAC：最小权限、责任分离、数据抽象" class="headerlink" title="RBAC：最小权限、责任分离、数据抽象"></a>RBAC：最小权限、责任分离、数据抽象</h4><p>who（<strong>认证服务器</strong>）、what（权限针对的对象 &amp; 资源 <strong>授权服务器</strong>）、how(具体的权限)</p><ul><li>who:user</li><li>what:<ul><li>静态资源 功能操作，数据列</li><li>动态资源 数据、文章、相册、笔记</li><li>post<ul><li>查看</li><li>新增</li></ul></li><li>photos</li></ul></li><li>how： CRUD<ul><li>user</li><li>role角色</li><li>permission权限</li><li>user_role</li><li>role_permission</li></ul></li></ul><h4 id="关系图："><a href="#关系图：" class="headerlink" title="关系图："></a>关系图：</h4><p><img src="/images/1565351362762.png" alt="1565351362762"></p><h4 id="模块图："><a href="#模块图：" class="headerlink" title="模块图："></a>模块图：</h4><p><img src="/images/1565351478309.png" alt="1565351478309"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;oAuth2案例&quot;&gt;&lt;a href=&quot;#oAuth2案例&quot; class=&quot;headerlink&quot; title=&quot;oAuth2案例&quot;&gt;&lt;/a&gt;oAuth2案例&lt;/h1&gt;&lt;h2 id=&quot;内存、jdbc存储令牌&quot;&gt;&lt;a href=&quot;#内存、jdbc存储令牌&quot; class
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="oAth2" scheme="http://yoursite.com/tags/oAth2/"/>
    
      <category term="sso" scheme="http://yoursite.com/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>Gradle</title>
    <link href="http://yoursite.com/2019/08/09/Gradle%E6%A1%88%E4%BE%8B/"/>
    <id>http://yoursite.com/2019/08/09/Gradle案例/</id>
    <published>2019-08-09T02:17:23.051Z</published>
    <updated>2019-08-09T02:16:53.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gradle案例"><a href="#Gradle案例" class="headerlink" title="Gradle案例"></a>Gradle案例</h1><h2 id="Project-amp-amp-task"><a href="#Project-amp-amp-task" class="headerlink" title="Project &amp;&amp; task"></a>Project &amp;&amp; task</h2><h3 id="Groovy基本语法"><a href="#Groovy基本语法" class="headerlink" title="Groovy基本语法"></a>Groovy基本语法</h3><h4 id="构建任务-amp-运行"><a href="#构建任务-amp-运行" class="headerlink" title="构建任务&amp;运行"></a>构建任务&amp;运行</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">task hello&#123;</span><br><span class="line">doLast &#123;</span><br><span class="line">        println <span class="string">'Hello world'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//改良</span></span><br><span class="line">task hello &lt;&lt; &#123;</span><br><span class="line">    println <span class="string">'Hello world'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//命令行</span></span><br><span class="line">&gt; gradle -q hello</span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><ul><li>gradle 构建脚本+ 运行脚本</li></ul><h4 id="运行任务前要依赖的任务"><a href="#运行任务前要依赖的任务" class="headerlink" title="运行任务前要依赖的任务"></a>运行任务前要依赖的任务</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">task <span class="string">"task$counter"</span> &lt;&lt; &#123;</span><br><span class="line">    println <span class="string">" I'm task number $counter"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//加入依赖</span></span><br><span class="line">task0.dependsOn task2, task3</span><br><span class="line"></span><br><span class="line">&gt; gradle -q task0</span><br><span class="line">I<span class="string">'m task number 0</span></span><br><span class="line"><span class="string">I'</span>m task number <span class="number">2</span></span><br><span class="line">I<span class="string">'m task number 3</span></span><br></pre></td></tr></table></figure><ul><li>喝水需要有杯子和烧好的水</li></ul><h4 id="声明任务之间的运行顺序"><a href="#声明任务之间的运行顺序" class="headerlink" title="声明任务之间的运行顺序"></a>声明任务之间的运行顺序</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">task after(<span class="string">dependsOn:</span> <span class="string">'before'</span>) &lt;&lt; &#123;</span><br><span class="line">    println <span class="string">'after'</span></span><br><span class="line">&#125;</span><br><span class="line">task before &lt;&lt; &#123;</span><br><span class="line">    println <span class="string">'before'</span></span><br><span class="line">&#125;</span><br><span class="line">&gt; gradle -q after </span><br><span class="line">before</span><br><span class="line">after</span><br><span class="line"></span><br><span class="line">task hello &lt;&lt; &#123;</span><br><span class="line">    println <span class="string">'hello'</span></span><br><span class="line">&#125;</span><br><span class="line">hello.doFirst &#123;</span><br><span class="line">    println <span class="string">'ask:'</span></span><br><span class="line">&#125;</span><br><span class="line">hello.doLast &#123;</span><br><span class="line">    println <span class="string">'shank hands'</span></span><br><span class="line">&#125;</span><br><span class="line">hello &lt;&lt; &#123;</span><br><span class="line">    println <span class="string">'leave'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &lt;&lt; 是 doLast 简写</span></span><br><span class="line"><span class="comment">// $hello.name 会出来 hello </span></span><br><span class="line"><span class="comment">//获取当前任务的名字</span></span><br><span class="line">&gt;gradle -q hello</span><br></pre></td></tr></table></figure><ul><li>喝水前要拿杯子，喝完要洗杯子</li></ul><h4 id="任务参数化"><a href="#任务参数化" class="headerlink" title="任务参数化"></a>任务参数化</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">task myTask&#123;</span><br><span class="line">    ext.myProperty = <span class="string">"myValue"</span></span><br><span class="line">&#125;</span><br><span class="line">task printTaskProperty &lt;&lt; &#123;</span><br><span class="line">    println myTask.myProperty</span><br><span class="line">&#125;</span><br><span class="line">&gt; gradle -q pritnTaskProperty</span><br><span class="line">myValue</span><br></pre></td></tr></table></figure><ul><li>杯子的名字</li></ul><h4 id="Ant构建工具"><a href="#Ant构建工具" class="headerlink" title="Ant构建工具"></a>Ant构建工具</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">task loadfile &lt;&lt; &#123;</span><br><span class="line">    <span class="keyword">def</span> files = file(<span class="string">'../antLoadfileResources'</span>).listFiles().sort()</span><br><span class="line">    files.each &#123;</span><br><span class="line">        File file -&gt; <span class="keyword">if</span> (file.isFile())&#123;</span><br><span class="line">            ant.loadfile(<span class="string">srcFile:</span> file, <span class="string">property:</span> file.name)</span><br><span class="line">            println <span class="string">" *** $file.name ***"</span></span><br><span class="line">            println <span class="string">"$&#123;ant.properties[file.name]&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历 ../antLoadfileResources 所有文件 打印出来</span></span><br><span class="line">&gt; gradle -q loadfile</span><br><span class="line">*** agile.manifesto.txt ***</span><br><span class="line">Individuals and interactions over processes and tools</span><br><span class="line">Working software over comprehensive documentation</span><br><span class="line">Customer collaboration  over contract negotiation</span><br><span class="line">Responding to change over following a plan</span><br><span class="line">*** gradle.manifesto.txt ***</span><br></pre></td></tr></table></figure><ul><li>脚本-&gt;任务管理+自动化</li></ul><h3 id="Java构建入门"><a href="#Java构建入门" class="headerlink" title="Java构建入门"></a>Java构建入门</h3><h4 id="项目编译class、打包jar、运行javac"><a href="#项目编译class、打包jar、运行javac" class="headerlink" title="项目编译class、打包jar、运行javac"></a>项目编译class、打包jar、运行javac</h4><ul><li>gradle bulid: 编译测试代码，并生成含所有类和资源的jar文件。<ol><li>clean：删除build的所有东西</li><li>assemble： 编译 &amp; 打包代码-&gt; 可执行文件</li><li>check：编译 &amp; 测试</li></ol></li></ul><h4 id="外部依赖"><a href="#外部依赖" class="headerlink" title="外部依赖"></a>外部依赖</h4><ul><li><p>提取 &amp; 放入 <strong>依赖</strong></p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加入依赖</span></span><br><span class="line"><span class="comment">// commons-coolections 加入编译阶段</span></span><br><span class="line"><span class="comment">//  junit 加入到了测试编译阶段.</span></span><br><span class="line">dependencies&#123;</span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'commons-coolections'</span>, <span class="string">name:</span> <span class="string">'commons-collections'</span>, <span class="string">version:</span> <span class="string">'3.2'</span></span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.+'</span>       </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//远程仓库</span></span><br><span class="line">repositories&#123;</span><br><span class="line">    maven&#123;</span><br><span class="line">        url <span class="string">'http://alibaba~~~~~/re~~/'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="定制项目"><a href="#定制项目" class="headerlink" title="定制项目"></a>定制项目</h4><ul><li>项目名+版本号  定制 MANIFEST.MF 文件</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = <span class="number">1.5</span></span><br><span class="line">version = <span class="string">'1.0'</span></span><br><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">'Implementation-Title'</span>: <span class="string">'myfirstProject'</span>, <span class="string">'Implementation-Version'</span>: version</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发布JAR文件"><a href="#发布JAR文件" class="headerlink" title="发布JAR文件"></a>发布JAR文件</h4><ul><li><p>本地仓库repos中 </p></li><li><blockquote><p>gradle uploadArchives命令发布jar文件</p></blockquote></li><li><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uploadArchives&#123;</span><br><span class="line">    repositories&#123;</span><br><span class="line">        flatDir&#123;</span><br><span class="line">            dirs <span class="string">'repos'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//------------------------------加入插件</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'eclipse'</span></span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------ 自定项目名+版本号</span></span><br><span class="line">sourceCompatibility = <span class="number">1.5</span></span><br><span class="line">version = <span class="string">'1.0'</span></span><br><span class="line">jar &#123;</span><br><span class="line">    manifest &#123;</span><br><span class="line">        attributes <span class="string">'Implementation-Title'</span>: <span class="string">'Gradle Quickstart'</span>, <span class="string">'Implementation-Version'</span>: version</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------ 远程仓库地址</span></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------ 项目依赖</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile <span class="string">group:</span> <span class="string">'commons-collections'</span>, <span class="string">name:</span> <span class="string">'commons-collections'</span>, <span class="string">version:</span> <span class="string">'3.2'</span></span><br><span class="line">    testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.+'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------测试时添加key value</span></span><br><span class="line">test &#123;</span><br><span class="line">    systemProperties <span class="string">'property'</span>: <span class="string">'value'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------ 打包上传仓库</span></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">       flatDir &#123;</span><br><span class="line">           dirs <span class="string">'repos'</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多项目构建"><a href="#多项目构建" class="headerlink" title="多项目构建"></a>多项目构建</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gradle案例&quot;&gt;&lt;a href=&quot;#Gradle案例&quot; class=&quot;headerlink&quot; title=&quot;Gradle案例&quot;&gt;&lt;/a&gt;Gradle案例&lt;/h1&gt;&lt;h2 id=&quot;Project-amp-amp-task&quot;&gt;&lt;a href=&quot;#Project-a
      
    
    </summary>
    
      <category term="部署" scheme="http://yoursite.com/categories/%E9%83%A8%E7%BD%B2/"/>
    
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
  </entry>
  
  <entry>
    <title>sso单点登录</title>
    <link href="http://yoursite.com/2019/08/09/sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
    <id>http://yoursite.com/2019/08/09/sso单点登录/</id>
    <published>2019-08-09T02:14:46.344Z</published>
    <updated>2019-08-09T13:42:29.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><ol><li><p>nginx 服务器： 192.168.75.128：81    </p></li><li><p>tomact1： 192.168.75.128：9090</p></li><li><p>tomcat2：192.168.75.128：9091</p></li></ol><ul><li><p>nginx IP:192.168.75.128:81 配置： listen: 80 </p><p>​                       tomcat_pool: <a href="http://192.168.75.128:9090" target="_blank" rel="noopener">http://192.168.75.128:9090</a></p><p>​                                                : <a href="http://192.168.75.128:9091" target="_blank" rel="noopener">http://192.168.75.128:9091</a></p></li><li><p>作用： 虚拟主机CDN /反向代理</p></li></ul><h2 id="SSO单点登录"><a href="#SSO单点登录" class="headerlink" title="SSO单点登录"></a>SSO单点登录</h2><h3 id="redis-c语言-key-value"><a href="#redis-c语言-key-value" class="headerlink" title="redis c语言 key-value"></a>redis c语言 key-value</h3><ul><li><p>字符： json</p></li><li><p>散列：Map</p></li><li><p>列表：list</p></li><li><p>集合：Set</p></li><li><p>有序集合：HashSet</p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ol><li>缓存</li><li>分布式集群架构的session分离 （http无状态 cookie  有状态  session服务端 判断用户是谁)</li><li>好友列表</li><li>消息队列  不用  我们用专门的</li><li>排行榜</li><li>网站访问量</li><li>数据</li><li>数字自增 日期 毫秒 并发   yyymmddhhmmss+redis的自增数字 订单号的生成方案</li></ol><h4 id="Redis高可用解决方案"><a href="#Redis高可用解决方案" class="headerlink" title="Redis高可用解决方案"></a>Redis高可用解决方案</h4><ul><li><p>keepalived </p></li><li><p>zookeeper</p></li><li><p>sentinel</p><p>主要解决单点故障  </p></li><li><p>应用 -&gt; sso单点登录  </p></li></ul><h4 id="传统登录机制"><a href="#传统登录机制" class="headerlink" title="传统登录机制"></a>传统登录机制</h4><ol><li><p>session会话机制 通过 将token 存到客户端的cookie ，之后每次客户端请求时携带token值让客户端识别WhoAmI</p><h5 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h5><ol><li>同源机制：必须在同源下才可以共享token</li><li>当创建多个不同服务器时（php/java/.net/) 所提供的session机制不同，会导致不识别</li><li>cookie不安全</li></ol></li></ol><h4 id="SSO单点登录-解决上诉痛点"><a href="#SSO单点登录-解决上诉痛点" class="headerlink" title="SSO单点登录 解决上诉痛点"></a>SSO单点登录 解决上诉痛点</h4><ul><li>步骤：</li></ul><ol><li><p>查询用户信息 redis到mysql  service层</p><ul><li><p>获取cookie中的token的value，作为key查询Redis是否有value(用户名)：有(已经登陆过) 提供user。 无  继续</p></li><li><p>去数据库查询有无该用户信息 ,有，将username，password存到redis（第一次登陆)，无,返回null(未登录)</p></li></ul></li><li><p>sso登录服务   controller层</p><ul><li>返回非null（且第一次登陆)  登录成功 用CookieUtil生成一个随机num，&lt;num,userId&gt;存放到Redis中（熔断了返回刷新重试)， &lt;token,num&gt;存放到客户端，  -&gt; 登录成功</li><li>返回null                    -&gt; 登录失败/未登录</li></ul></li></ol><ul><li><p>效果：通过redis实现统一的session管理，解决缺陷2，无论何种服务器，存储数据格式方案一致，token从客户端到服务端两次分离，解决cookie不安全（缺陷3)；同源机制可以通过nginx反向代理解决/Zuul网关。</p></li><li><p>th拦截器可以用vue判断json返回 是否执行跳转。</p></li><li><p>拦截器还有个拦截Config 拦截所有资源，去到下列拦截执行器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.admin.interceptor;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAdminInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Overrider</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span>&#123;</span><br><span class="line">        <span class="comment">//cookie 为空 一定没有登陆 -&gt;去单点登录</span></span><br><span class="line">        String token = CookieU ~~</span><br><span class="line">        response.senRedirect(<span class="string">"http://login.html"</span>); <span class="comment">// 该常量可以放进config里面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Overrider</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modeAndView)</span></span>&#123;</span><br><span class="line">        <span class="comment">//cookie有，但是不一定登录 session里那数据</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        User user = session.getAttribute(<span class="string">"user"</span>); <span class="comment">//局部会话</span></span><br><span class="line">        <span class="comment">//user不为空 处于局部会话的已登录状态----------------------------</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"user"</span>,user); <span class="comment">//提供给下一个跳转的有缘人</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//user为空 处于未登录状态--------------------------------------</span></span><br><span class="line">        <span class="comment">//Cookie 拿到的token ，value作为key去Redis查询 ，拿到loginCode 去mapper拿到完整user</span></span><br><span class="line">        <span class="comment">//如果loginCode不为空  -&gt; 已登录   创建局部会话，并把user存放到里面</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">"user"</span>,user);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二次确认</span></span><br><span class="line">        user == <span class="keyword">null</span> ;</span><br><span class="line">        <span class="comment">//直接重定向到登录系统</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Overrider</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handle, Execption ex)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出现问题</span></span><br><span class="line"><span class="comment">//RedisService无法被自动注入</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorConfig</span> <span class="keyword">implements</span>  <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">     <span class="meta">@Bean</span></span><br><span class="line">     <span class="function">WebAdminInterceptor <span class="title">webAdminInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> WebAdminInterceptor();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addIntercepotrs</span><span class="params">(InterceptorRegistry registry)</span></span>&#123;</span><br><span class="line">         registry.addIntercptor(<span class="keyword">new</span> WebAdminInterceptor())</span><br><span class="line">             .addPathPatterns(<span class="string">"/**"</span>)</span><br><span class="line">             .excluedPathPatterns(<span class="string">"/static"</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li><p>跨域：同源策略下的脚本安全问题，浏览器限制脚本只能在同源下执行，但是现在是微服务，可能位于不同ip/域名/端口，导致存在。</p><p>解决：</p><ol><li>CORS跨资源共享，浏览器自动完成，在header设置即可，关键在服务器实现CORS接口即可:-1:不支持老式浏览器</li><li>Jsonp 利用<code>&lt;script&gt;</code>的开放策略 ，前端从json解析器变成JavaScript直译器，需要目标服务器配合calback函数。:+1:支持老式浏览器，:-1:只支持get请求,需要客户端服务端同时改变</li><li>Nginx反向代理：挺好的</li></ol><p>方案3步骤：在docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">user</span> <span class="attr">nginx:</span></span><br><span class="line"><span class="string">~~~~~</span></span><br><span class="line"><span class="string">server&#123;</span></span><br><span class="line">    <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">    <span class="string">server_name</span> <span class="number">192.168</span><span class="number">.75</span><span class="number">.128</span><span class="string">;</span></span><br><span class="line">    <span class="string">location</span> <span class="string">/&#123;</span></span><br><span class="line">        <span class="string">add_header</span> <span class="string">Access-Control-Allow-Origin</span> <span class="string">*;</span></span><br><span class="line">        <span class="string">add_header</span> <span class="string">Access-Control-Headers</span> <span class="string">X-Requested-With;</span></span><br><span class="line">        <span class="string">add_header</span> <span class="string">Access-Control-Methods</span> <span class="string">GET,POST,OPTIONS;</span></span><br><span class="line"></span><br><span class="line">        <span class="string">数据卷</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;nginx 服务器： 192.168.75.128：81    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="oAth2" scheme="http://yoursite.com/tags/oAth2/"/>
    
      <category term="sso" scheme="http://yoursite.com/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>oAth2(一)</title>
    <link href="http://yoursite.com/2019/08/08/oAuth2%E5%89%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2019/08/08/oAuth2前言/</id>
    <published>2019-08-08T09:17:04.755Z</published>
    <updated>2019-08-09T02:01:58.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="oAth2"><a href="#oAth2" class="headerlink" title="oAth2"></a>oAth2</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="传统登录状态出现问题"><a href="#传统登录状态出现问题" class="headerlink" title="传统登录状态出现问题"></a>传统登录状态出现问题</h3><ul><li>多个服务分别部署，需要分别登录</li><li>第三方应用介入对用户登录信息的需求</li><li>用户无法限制第三方应用在某个微服务中的授权范围和使用期限</li><li>用户修改登录信息对第三方的应用影响</li><li>第三方应用的破解会导致用户密码泄露</li></ul><h3 id="OAth2"><a href="#OAth2" class="headerlink" title="OAth2"></a>OAth2</h3><h4 id="架构模式"><a href="#架构模式" class="headerlink" title="架构模式"></a>架构模式</h4><p><img src="/images/30ef50ac37cf297f7235423dca467a0.png" alt="30ef50ac37cf297f7235423dca467a0"></p><h4 id="交互过程"><a href="#交互过程" class="headerlink" title="交互过程"></a>交互过程</h4><p><img src="/images/1565248279599-1565315542308.png" alt="1565248279599"></p><h4 id="开放平台"><a href="#开放平台" class="headerlink" title="开放平台"></a>开放平台</h4><h4 id="交互模型"><a href="#交互模型" class="headerlink" title="交互模型"></a>交互模型</h4><ul><li>资源拥有者：用户</li><li>客户端：APP</li><li>服务提供方：<ul><li>认证服务器</li><li>资源服务器</li></ul></li></ul><p>步骤：</p><ol><li><p>用户 - 输入账号密码 -&gt; 腾讯提供的开放平台（提供：给谁授权、授权范围)</p><p><img src="/images/1565249566465.png" alt="a"></p></li><li><p>腾讯提供的开放平台登录成功 - 有道云笔记 授权码-&gt; 有道云笔记根据授权码访问腾讯 <strong>认证服务器</strong>去拿 <strong>访问令牌</strong>，用 <strong>访问令牌</strong> 去腾讯的 <strong>资源服务器</strong>， <strong>资源服务器</strong> 根据令牌上的（授权人 &amp; 授权范围 ) 提供相应的资源：（用户昵称、头像、性别）。</p><p><img src="/images/1565250055507-1565315796824.png" alt="1565250055507"></p></li></ol><ol start="3"><li><p>有道云笔记根据获取的信息先注册个账号（填入相关信息 ： 不过你还要再完善相关信息：手机这些）</p></li><li><p>总结：开放平台只是获取部分信息，简化一定的注册流程</p></li></ol><h4 id="遵循OAuth2-0协议-即接口"><a href="#遵循OAuth2-0协议-即接口" class="headerlink" title="遵循OAuth2.0协议  即接口"></a>遵循OAuth2.0协议  即接口</h4><p>提供认证和授权标准</p><p>例如：接口JAP @Table @Column @Id  Hibernate实现</p><p>用Spring Security 实现</p><h4 id="令牌的访问与刷新"><a href="#令牌的访问与刷新" class="headerlink" title="令牌的访问与刷新"></a>令牌的访问与刷新</h4><h5 id="原始令牌风险"><a href="#原始令牌风险" class="headerlink" title="原始令牌风险"></a>原始令牌风险</h5><p>url：<a href="http://www.sdfsdf/usr/token=123" target="_blank" rel="noopener">http://www.sdfsdf/usr/token=123</a></p><ol><li>toekn被人发现，被爬虫一直刷</li><li>token一直在，别人抓包，就能抓到令牌，数据被别人拿去。</li></ol><p>解决方案：</p><ul><li>令牌刷新，用旧令牌获取新令牌：传入refresh_token 、 client_id 认证服务器通过会返回新的Access Token </li><li>要求： Refresh Token 保存在客户端服务器</li><li>client_secret机制：client_id(客户端) &lt;-&gt; client_secret（服务端）,在申请client_id会一起把client_secret分配给客户端，client_secret ##妥善保管在服务器##,刷新Access Token ，需要验证client_secret。</li></ul><p>url变成：</p><p>url:<a href="http://www.sdfsdf//refresh?refresh_token=&amp;client_id=&amp;client_secret=" target="_blank" rel="noopener">http://www.sdfsdf//refresh?refresh_token=&amp;client_id=&amp;client_secret=</a></p><p>所以第三方应用提供：</p><ul><li>appId  =  client_id</li><li>appSecret = client_secret</li></ul><h4 id="客户端授权模式"><a href="#客户端授权模式" class="headerlink" title="客户端授权模式"></a>客户端授权模式</h4><ol><li><p>简化模式</p><p>纯静态页面应用，APP，小程序，HTML5，第三方天气，个人博客，只有前端js控制权。</p></li><li><p>授权码模式</p><p><img src="/images/1565253618597-1565315907306.png" alt="1565253618597"></p></li><li><p>密码模式</p><p><img src="/images/1565253750375-1565315993925.png" alt="1565253750375"></p></li><li><p>客户端模式</p><p><img src="/images/1565253843719-1565316081624.png" alt="1565253843719"></p></li></ol><p>总结：</p><p><img src="/images/1565253981885-1565316114460.png" alt="1565253981885"></p><p>+访问令牌+ access Toekn + Refresh Toekn</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;oAth2&quot;&gt;&lt;a href=&quot;#oAth2&quot; class=&quot;headerlink&quot; title=&quot;oAth2&quot;&gt;&lt;/a&gt;oAth2&lt;/h1&gt;&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="oAth2" scheme="http://yoursite.com/tags/oAth2/"/>
    
      <category term="sso" scheme="http://yoursite.com/tags/sso/"/>
    
  </entry>
  
  <entry>
    <title>java网络编程</title>
    <link href="http://yoursite.com/2019/07/28/Netty/"/>
    <id>http://yoursite.com/2019/07/28/Netty/</id>
    <published>2019-07-28T10:05:51.226Z</published>
    <updated>2019-08-08T12:10:41.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java网络编程"><a href="#java网络编程" class="headerlink" title="java网络编程"></a>java网络编程</h1><h2 id="1、NIO"><a href="#1、NIO" class="headerlink" title="1、NIO"></a>1、NIO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">psvm&#123;</span><br><span class="line">    ServerSocket ss = <span class="keyword">new</span> ServerSocket(); </span><br><span class="line">    ss.bind(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>),<span class="number">8888</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        Socket s = ss.accept();</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt;&#123;</span><br><span class="line">                heandle(s);</span><br><span class="line">            &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(Socket s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = s.getInputStream().read(bytes);</span><br><span class="line">        </span><br><span class="line">        s.getOutputStream().write(bytes,<span class="number">0</span>,len);</span><br><span class="line">    &#125;<span class="keyword">catch</span> &#123;bala&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">graph RL    ss --bind --> s        subgraph server            s(s:127.0.0.1:8888)        end        subgraph listen            s --accept--> thread1            s --accept--> thread2             s --accept-->thread3        end</pre><h3 id="NIO会出现的问题"><a href="#NIO会出现的问题" class="headerlink" title="NIO会出现的问题"></a>NIO会出现的问题</h3><ul><li>ss.accept()内的线程会</li><li>read</li><li>write</li></ul><h3 id="解决方案：轮询"><a href="#解决方案：轮询" class="headerlink" title="解决方案：轮询"></a>解决方案：轮询</h3><ol><li><h4 id="NIO-single-Thread（NewNon-Blocking"><a href="#NIO-single-Thread（NewNon-Blocking" class="headerlink" title="NIO-single Thread（NewNon-Blocking)"></a>NIO-single Thread（NewNon-Blocking)</h4><p>说明：大管家selector轮询：如果有客户端连接，就处理（单线程）压力很大</p><p><img src="/images/NIOsingleThread.png" alt="1564315140781"></p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">psvm&#123;</span><br><span class="line">    ServerSocketChannel ssc = .open();</span><br><span class="line">    ssc.socket().bind (~~~);</span><br><span class="line">    ssc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">    Selector selector = Selector.open();</span><br><span class="line">    ssc.register(selector ,~);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        selector.select(); <span class="comment">//轮询选择到的请求 -&gt; 也是阻塞</span></span><br><span class="line">       Set&lt;SelectionKey&gt; key -&gt; selector.selectedKeys(); <span class="comment">//事件发生 把当前事件设个key</span></span><br><span class="line">        <span class="comment">//遍历SelectinKey 把得到的key remove</span></span><br><span class="line">        handle(key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ServerSocketChannel ssc  = key.channel();</span><br><span class="line">    SocketChannel sc = ssc.accept();</span><br><span class="line">    <span class="comment">//阻塞 -&gt; false</span></span><br><span class="line">    sc.register( <span class="comment">//设一个key)</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><pre class="mermaid">graph RL     boy(大管家) --注册--> accept1    boy(大管家) --注册--> accept2    subgraph list        key_one         key_two     end    subgraph 插座        accept1 --register--- key_one        accept2 --register--- key_two          等待    end</pre><p>#### </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java网络编程&quot;&gt;&lt;a href=&quot;#java网络编程&quot; class=&quot;headerlink&quot; title=&quot;java网络编程&quot;&gt;&lt;/a&gt;java网络编程&lt;/h1&gt;&lt;h2 id=&quot;1、NIO&quot;&gt;&lt;a href=&quot;#1、NIO&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="Netty" scheme="http://yoursite.com/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>标签测试</title>
    <link href="http://yoursite.com/2019/07/28/%E6%A0%87%E7%AD%BE%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/07/28/标签测试/</id>
    <published>2019-07-28T03:11:35.745Z</published>
    <updated>2019-07-28T03:18:42.997Z</updated>
    
    <content type="html"><![CDATA[<p>随便写写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随便写写&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Testing" scheme="http://yoursite.com/tags/Testing/"/>
    
      <category term="Another Tag" scheme="http://yoursite.com/tags/Another-Tag/"/>
    
  </entry>
  
  <entry>
    <title>hexo第二次试验</title>
    <link href="http://yoursite.com/2019/07/28/hexo%E7%AC%AC%E4%BA%8C%E6%AC%A1%E8%AF%95%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/07/28/hexo第二次试验/</id>
    <published>2019-07-28T02:55:43.000Z</published>
    <updated>2019-07-28T03:00:46.804Z</updated>
    
    <content type="html"><![CDATA[<p>sdfsdfsd</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sdfsdfsd&lt;/p&gt;

      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>打 打一个大菠萝呀</title>
    <link href="http://yoursite.com/2019/07/27/%E6%89%93-%E6%89%93%E4%B8%80%E4%B8%AA%E5%A4%A7%E8%8F%A0%E8%90%9D%E5%91%80/"/>
    <id>http://yoursite.com/2019/07/27/打-打一个大菠萝呀/</id>
    <published>2019-07-27T02:47:04.000Z</published>
    <updated>2019-07-27T02:47:04.802Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/07/27/hello-world/"/>
    <id>http://yoursite.com/2019/07/27/hello-world/</id>
    <published>2019-07-27T02:36:02.073Z</published>
    <updated>2019-07-27T02:36:02.074Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
